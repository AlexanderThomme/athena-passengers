# generated by datamodel-codegen:
#   filename:  ComplaintHandlingNextBestActionDecisionService.yaml
#   timestamp: 2024-06-30T16:01:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Status(Enum):
    RECEIVED = 'RECEIVED'
    IN_PROCESS_VALIDATED = 'IN_PROCESS_VALIDATED'
    IN_PROCESS_ASSESSED = 'IN_PROCESS_ASSESSED'
    IN_PROCESS_VERIFIED = 'IN_PROCESS_VERIFIED'
    IN_PROCESS_LOSS_ADJUSTER_REPORTED = 'IN_PROCESS_LOSS_ADJUSTER_REPORTED'
    REJECTION_SENT = 'REJECTION_SENT'
    REJECTION_COMPLAINT = 'REJECTION_COMPLAINT'
    OFFER_SENT = 'OFFER_SENT'
    OFFER_ACCEPTED = 'OFFER_ACCEPTED'
    PAID = 'PAID'
    CLOSED = 'CLOSED'


class PreferredChannel(Enum):
    email = 'email'
    mail = 'mail'
    SMS = 'SMS'
    phone = 'phone'


class Client(BaseModel):
    id: Optional[int] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    dateOfBirth: Optional[datetime] = None
    firstContractDate: Optional[datetime] = None
    cltvPercentile: Optional[int] = None
    propensityToUpgradePolicy: Optional[float] = None
    preferredChannel: Optional[PreferredChannel] = None


class Motive(Enum):
    UnsatisfiedWithDelay = 'UnsatisfiedWithDelay'
    UnsatisfiedWithReimbursedAmount = 'UnsatisfiedWithReimbursedAmount'
    UnsatisfiedWithAppliedCoverages = 'UnsatisfiedWithAppliedCoverages'
    UnsatisfiedWithQualityOfCustomerService = 'UnsatisfiedWithQualityOfCustomerService'
    InformationInquiry = 'InformationInquiry'
    OtherMotive = 'OtherMotive'


class ClientInteraction(BaseModel):
    date: datetime
    motive: Optional[Motive] = None
    intentionToLeave: Optional[bool] = None
    competitorName: Optional[str] = None
    competitorPolicyName: Optional[str] = None
    competitorPrice: Optional[float] = None
    desiredResolutionDate: Optional[datetime] = None
    desiredReimbursementDate: Optional[datetime] = None
    expectedAmount: Optional[float] = None
    unsatisfiedWithDeductible: Optional[bool] = None


class Type(Enum):
    Wind = 'Wind'
    Hail = 'Hail'
    Fire = 'Fire'
    Lightning = 'Lightning'
    WaterDamage = 'WaterDamage'
    Freezing = 'Freezing'
    OtherDamage = 'OtherDamage'
    Theft = 'Theft'
    CarAccident = 'CarAccident'


class Type1(Enum):
    Car = 'Car'
    Motorbike = 'Motorbike'
    Truck = 'Truck'
    Lorry = 'Lorry'
    Land = 'Land'
    MainResidencialBuilding = 'MainResidencialBuilding'
    AuxiliaryResidencialBuilding = 'AuxiliaryResidencialBuilding'
    AuxiliaryNonResidencialBuilding = 'AuxiliaryNonResidencialBuilding'
    Flat = 'Flat'
    ParkingLot = 'ParkingLot'
    PersonalObject = 'PersonalObject'


class InsurableObject(BaseModel):
    type: Optional[Type1] = None
    description: Optional[str] = None
    estimatedValue: Optional[float] = None


class PolicyType(Enum):
    Auto = 'Auto'
    Motorcycle = 'Motorcycle'
    Home = 'Home'
    PersonalObject = 'PersonalObject'
    Life = 'Life'
    Health = 'Health'


class SubType(Enum):
    AutoThirdParty = 'AutoThirdParty'
    AutoAllRisk = 'AutoAllRisk'
    HomeBuildingsOnly = 'HomeBuildingsOnly'
    HomeBuildingsAndContent = 'HomeBuildingsAndContent'


class Option(Enum):
    SubstitutionVehicle = 'SubstitutionVehicle'
    ContentIncluded = 'ContentIncluded'
    NoDeductible = 'NoDeductible'


class Code(Enum):
    Wind = 'Wind'
    Hail = 'Hail'
    Fire = 'Fire'
    Lightning = 'Lightning'
    WaterDamage = 'WaterDamage'
    Freezing = 'Freezing'
    OtherDamage = 'OtherDamage'
    Theft = 'Theft'
    CarAccident = 'CarAccident'


class SubscribedCoverage(BaseModel):
    insurableObject: Optional[InsurableObject] = None
    code: Optional[Code] = None
    protectionAmount: Optional[float] = None
    deductible: Optional[float] = None


class Action(BaseModel):
    explanationCode: Optional[str] = None
    typeDisc__: str


class Assign(BaseModel):
    explanationCode: Optional[str] = None


class Channel(Enum):
    email = 'email'
    mail = 'mail'
    SMS = 'SMS'
    phone = 'phone'


class MessageType(Enum):
    ApologyOnly = 'ApologyOnly'
    SorryAboutPerceptionButFair = 'SorryAboutPerceptionButFair'
    AcknowledgmentOfReceipt = 'AcknowledgmentOfReceipt'
    Proposal = 'Proposal'


class CommunicateWithClient(Action):
    channel: Optional[Channel] = None
    messageType: Optional[MessageType] = None


class Discount(Action):
    description: Optional[str] = None
    percentage: Optional[float] = None


class DiscountOnNextRenewal(Action):
    description: Optional[str] = None
    percentage: Optional[float] = None


class InfoElement(BaseModel):
    path: Optional[str] = None
    questionId: Optional[str] = None
    type: Optional[str] = None


class Recipient(Enum):
    CallCenterClientRepresentative = 'CallCenterClientRepresentative'
    SpecializedClientRepresentative = 'SpecializedClientRepresentative'
    ClaimsExpert = 'ClaimsExpert'
    QualitySpecialist = 'QualitySpecialist'


class Reassign(Action):
    recipient: Optional[Recipient] = None
    suggestion: Optional[str] = None


class ReassignWithCallback(Action):
    recipient: Optional[Recipient] = None
    suggestion: Optional[str] = None
    callBackDeadline: Optional[int] = None


class SimpleUpsellProposal(Action):
    description: Optional[str] = None


class TaskSequence(Action):
    tasks: Optional[List[Assign]] = None


class Voucher(Action):
    description: Optional[str] = None
    value: Optional[float] = None


class Error(BaseModel):
    code: Optional[int] = Field(None, description='HTTP error code.')
    message: Optional[str] = Field(None, description='Error message.')
    details: Optional[str] = Field(None, description='Detailed error message.')
    errorCode: Optional[str] = Field(None, description='Product error code.')


class Response(BaseModel):
    actions: Optional[List[Action]] = None
    missingInfoElements: Optional[List[InfoElement]] = None
    outputTraces: Optional[List[str]] = None


class Damage(BaseModel):
    insurableObject: Optional[InsurableObject] = None
    type: Optional[Type] = None
    lossValue: Optional[float] = None
    description: Optional[str] = None
    date: Optional[datetime] = None
    repairable: Optional[bool] = None


class InsurancePolicy(BaseModel):
    id: Optional[int] = None
    effectiveDate: Optional[datetime] = None
    expirationDate: Optional[datetime] = None
    policyType: Optional[PolicyType] = None
    subType: Optional[SubType] = None
    client: Optional[Client] = None
    coverages: Optional[List[SubscribedCoverage]] = Field(None, unique_items=True)
    options: Optional[List[Option]] = None


class Request(BaseModel):
    field__DecisionID__: Optional[str] = Field(
        None,
        alias='__DecisionID__',
        description='Unique identifier representing the execution of the decision service operation. If it is not specified, it will be computed automatically.',
    )
    complaint: Optional[ComplaintOnClaim] = None


class ActualCoverage(BaseModel):
    settlementOffer: Optional[ClaimSettlementOffer] = None
    subscribedCoverage: Optional[SubscribedCoverage] = None
    applies: Optional[bool] = None
    description: Optional[str] = None
    reimbursementFactor: Optional[float] = None
    deductible: Optional[float] = None


class Claim(BaseModel):
    id: Optional[int] = None
    status: Optional[Status] = None
    creationDate: Optional[datetime] = None
    targetDurationInDays: Optional[int] = None
    policy: Optional[InsurancePolicy] = None
    damages: Optional[List[Damage]] = Field(None, unique_items=True)
    settlementOffer: Optional[ClaimSettlementOffer] = None


class ClaimSettlementOffer(BaseModel):
    claim: Optional[Claim] = None
    creationDate: Optional[datetime] = None
    cancelContractAtExpiration: Optional[bool] = None
    cancelContractObjectCeased: Optional[bool] = None
    clientResponsibleForDamage: Optional[bool] = None
    actualCoverages: Optional[List[ActualCoverage]] = Field(None, unique_items=True)


class ComplaintOnClaim(BaseModel):
    claim: Optional[Claim] = None
    interactions: Optional[List[ClientInteraction]] = None


Request.update_forward_refs()
ActualCoverage.update_forward_refs()
Claim.update_forward_refs()
