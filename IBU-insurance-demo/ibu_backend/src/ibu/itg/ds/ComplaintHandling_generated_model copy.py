# generated by datamodel-codegen:
#   filename:  datamgr_openapi.yaml
#   timestamp: 2024-06-30T01:12:08+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field

class Motive(Enum):
    UnsatisfiedWithDelay = 'UnsatisfiedWithDelay'
    UnsatisfiedWithReimbursedAmount = 'UnsatisfiedWithReimbursedAmount'
    UnsatisfiedWithAppliedCoverages = 'UnsatisfiedWithAppliedCoverages'
    UnsatisfiedWithQualityOfCustomerService = 'UnsatisfiedWithQualityOfCustomerService'
    InformationInquiry = 'InformationInquiry'
    

class ChannelType(Enum):
    email = 'email'
    mail = 'mail'
    SMS = 'SMS'
    phone = 'phone'


class ClaimStatusType(Enum):
    RECEIVED = 'RECEIVED'
    IN_PROCESS_VALIDATED = 'IN_PROCESS_VALIDATED'
    IN_PROCESS_ASSESSED = 'IN_PROCESS_ASSESSED'
    IN_PROCESS_VERIFIED = 'IN_PROCESS_VERIFIED'
    IN_PROCESS_LOSS_ADJUSTER_REPORTED = 'IN_PROCESS_LOSS_ADJUSTER_REPORTED'
    REJECTION_SENT = 'REJECTION_SENT'
    REJECTION_COMPLAINT = 'REJECTION_COMPLAINT'
    OFFER_SENT = 'OFFER_SENT'
    OFFER_ACCEPTED = 'OFFER_ACCEPTED'
    PAID = 'PAID'
    CLOSED = 'CLOSED'


class DamageType(Enum):
    Wind = 'Wind'
    Hail = 'Hail'
    Fire = 'Fire'
    Lightning = 'Lightning'
    WaterDamage = 'WaterDamage'
    Freezing = 'Freezing'
    OtherDamage = 'OtherDamage'
    Theft = 'Theft'
    CarAccident = 'CarAccident'


class InsurableObjectType(Enum):
    Car = 'Car'
    Motorbike = 'Motorbike'
    Truck = 'Truck'
    Lorry = 'Lorry'
    Land = 'Land'
    MainResidencialBuilding = 'MainResidencialBuilding'
    AuxiliaryResidencialBuilding = 'AuxiliaryResidencialBuilding'
    AuxiliaryNonResidencialBuilding = 'AuxiliaryNonResidencialBuilding'
    Flat = 'Flat'
    ParkingLot = 'ParkingLot'
    PersonalObject = 'PersonalObject'


class OptionType(Enum):
    SubstitutionVehicle = 'SubstitutionVehicle'
    ContentIncluded = 'ContentIncluded'
    NoDeductible = 'NoDeductible'


class PolicySubType(Enum):
    AutoThirdParty = 'AutoThirdParty'
    AutoAllRisk = 'AutoAllRisk'
    HomeBuildingsOnly = 'HomeBuildingsOnly'
    HomeBuildingsAndContent = 'HomeBuildingsAndContent'


class PolicyType(Enum):
    Auto = 'Auto'
    Motorcycle = 'Motorcycle'
    Home = 'Home'
    PersonalObject = 'PersonalObject'
    Life = 'Life'
    Health = 'Health'


class ActualCoverage(BaseModel):
    id: Optional[int] = None
    settlementOffer: Optional[ClaimSettlementOffer] = None
    subscribedCoverage: Optional[SubscribedCoverage] = None
    applies: Optional[bool] = None
    description: Optional[str] = None
    reimbursementFactor: Optional[float] = None
    deductible: Optional[float] = None


class Claim(BaseModel):
    id: Optional[int] = None
    status: Optional[ClaimStatusType] = None
    creationDate: Optional[datetime] = None
    targetDurationInDays: Optional[int] = None
    policy: Optional[InsurancePolicy] = None
    damages: Optional[List[Damage]] = Field(None)
    settlementOffer: Optional[ClaimSettlementOffer] = None


class ClaimSettlementOffer(BaseModel):
    id: Optional[int] = None
    claim: Optional[Claim] = None
    creationDate: Optional[datetime] = None
    cancelContractAtExpiration: Optional[bool] = None
    cancelContractObjectCeased: Optional[bool] = None
    clientResponsibleForDamage: Optional[bool] = None
    actualCoverages: Optional[List[ActualCoverage]] = Field(None)


class Client(BaseModel):
    id: Optional[int] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    dateOfBirth: Optional[datetime] = None
    firstContractDate: Optional[datetime] = None
    cltvPercentile: Optional[int] = None
    propensityToUpgradePolicy: Optional[float] = None
    policies: Optional[List[InsurancePolicy]] = Field(None)
    preferredChannel: Optional[ChannelType] = None


class Damage(BaseModel):
    id: Optional[int] = None
    claim: Optional[Claim] = None
    insurableObject: Optional[InsurableObject] = None
    type: Optional[DamageType] = None
    isRepairable: Optional[bool] = None
    lossValue: Optional[float] = None
    description: Optional[str] = None
    date: Optional[datetime] = None
    repairable: Optional[bool] = None


class InsurableObject(BaseModel):
    id: Optional[int] = None
    coverages: Optional[List[SubscribedCoverage]] = Field(None)
    type: Optional[InsurableObjectType] = None
    description: Optional[str] = None
    estimatedValue: Optional[float] = None


class InsurancePolicy(BaseModel):
    id: Optional[int] = None
    effectiveDate: Optional[datetime] = None
    expirationDate: Optional[datetime] = None
    policyType: Optional[PolicyType] = None
    subType: Optional[PolicySubType] = None
    client: Optional[Client] = None
    claims: Optional[List[Claim]] = Field(None)
    coverages: Optional[List[SubscribedCoverage]] = Field(None)
    options: Optional[List[OptionType]] = None


class SubscribedCoverage(BaseModel):
    id: Optional[int] = None
    policy: Optional[InsurancePolicy] = None
    insurableObject: Optional[InsurableObject] = None
    code: Optional[DamageType] = None
    protectionAmount: Optional[float] = None
    deductible: Optional[float] = None


ActualCoverage.update_forward_refs()
Claim.update_forward_refs()
Client.update_forward_refs()
Damage.update_forward_refs()
InsurableObject.update_forward_refs()
InsurancePolicy.update_forward_refs()
